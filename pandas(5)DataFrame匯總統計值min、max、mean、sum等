{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Day10",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ZiYu-Huang/Practices-for-Beginners/blob/main/pandas(5)DataFrame%E5%8C%AF%E7%B8%BD%E7%B5%B1%E8%A8%88%E5%80%BCmin%E3%80%81max%E3%80%81mean%E3%80%81sum%E7%AD%89\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3p4-SC4UK8ZX"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#匯總統計值\n",
        "mean(平均值)、sum(加總)、median(中位數)等..."
      ],
      "metadata": {
        "id": "bhcKlbg8KPuq"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ALi5tTpiYm8W"
      },
      "source": [
        "test = pd.DataFrame( np.arange(64).reshape(8,8) , columns = [i for i in 'abcdefgh'] ) \n",
        "# np.arrange 就像是我們熟知 range \n",
        "# np.arrange(64) 就是產生一個0到63 shape為(64)的一維陣列\n",
        "# reshape成為8x8的陣列\n",
        "# [i for i in 'abcdefgh'] 串列生成式 你看不懂我也沒辦法了"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rZ3VoFo_Y726"
      },
      "source": [
        "test['String'] = ['q','w','e','r','t','y','u','i']\n",
        "# 在test這個DataFrame中新建一個欄位\"String\"並傳入值(值都是字元)"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "Sw2sLFHZaHUC",
        "outputId": "ffeb38bf-61e6-43a1-b3b2-1ba6dd0fc3c5"
      },
      "source": [
        "test"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>a</th>\n",
              "      <th>b</th>\n",
              "      <th>c</th>\n",
              "      <th>d</th>\n",
              "      <th>e</th>\n",
              "      <th>f</th>\n",
              "      <th>g</th>\n",
              "      <th>h</th>\n",
              "      <th>String</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>q</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "      <td>11</td>\n",
              "      <td>12</td>\n",
              "      <td>13</td>\n",
              "      <td>14</td>\n",
              "      <td>15</td>\n",
              "      <td>w</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>16</td>\n",
              "      <td>17</td>\n",
              "      <td>18</td>\n",
              "      <td>19</td>\n",
              "      <td>20</td>\n",
              "      <td>21</td>\n",
              "      <td>22</td>\n",
              "      <td>23</td>\n",
              "      <td>e</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>24</td>\n",
              "      <td>25</td>\n",
              "      <td>26</td>\n",
              "      <td>27</td>\n",
              "      <td>28</td>\n",
              "      <td>29</td>\n",
              "      <td>30</td>\n",
              "      <td>31</td>\n",
              "      <td>r</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>32</td>\n",
              "      <td>33</td>\n",
              "      <td>34</td>\n",
              "      <td>35</td>\n",
              "      <td>36</td>\n",
              "      <td>37</td>\n",
              "      <td>38</td>\n",
              "      <td>39</td>\n",
              "      <td>t</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>40</td>\n",
              "      <td>41</td>\n",
              "      <td>42</td>\n",
              "      <td>43</td>\n",
              "      <td>44</td>\n",
              "      <td>45</td>\n",
              "      <td>46</td>\n",
              "      <td>47</td>\n",
              "      <td>y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>48</td>\n",
              "      <td>49</td>\n",
              "      <td>50</td>\n",
              "      <td>51</td>\n",
              "      <td>52</td>\n",
              "      <td>53</td>\n",
              "      <td>54</td>\n",
              "      <td>55</td>\n",
              "      <td>u</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>56</td>\n",
              "      <td>57</td>\n",
              "      <td>58</td>\n",
              "      <td>59</td>\n",
              "      <td>60</td>\n",
              "      <td>61</td>\n",
              "      <td>62</td>\n",
              "      <td>63</td>\n",
              "      <td>i</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    a   b   c   d   e   f   g   h String\n",
              "0   0   1   2   3   4   5   6   7      q\n",
              "1   8   9  10  11  12  13  14  15      w\n",
              "2  16  17  18  19  20  21  22  23      e\n",
              "3  24  25  26  27  28  29  30  31      r\n",
              "4  32  33  34  35  36  37  38  39      t\n",
              "5  40  41  42  43  44  45  46  47      y\n",
              "6  48  49  50  51  52  53  54  55      u\n",
              "7  56  57  58  59  60  61  62  63      i"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vH6WehAGaxtq",
        "outputId": "66f8ad15-edf3-48e1-c467-d2e487b3fb17"
      },
      "source": [
        "test.mean() #取得各欄位(col)平均值\n",
        "#結果為a到h各個欄位的mean，而string這個欄位沒有輸出結果，因為字元非數字\n",
        "#意思是匯總函式會自動過濾無法算出的值"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "a    28.0\n",
              "b    29.0\n",
              "c    30.0\n",
              "d    31.0\n",
              "e    32.0\n",
              "f    33.0\n",
              "g    34.0\n",
              "h    35.0\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vP9_E5iSfFxy",
        "outputId": "4ed8cd08-1363-47ed-ddef-10ffd608fb87"
      },
      "source": [
        "test['a'].mean() #也能取得單個column的平均值，只需配合索引使用"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "28.0"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "對row匯總統計"
      ],
      "metadata": {
        "id": "jPzst6-yLItq"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2WRooU80axmK",
        "outputId": "f65a9641-0c14-4d97-e497-c0dc06bde679"
      },
      "source": [
        "test.mean(axis=1)#如果想取得每個row的平均值，而不是column，需在後方設定參數axis=1，若無設定預設為0"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     3.5\n",
              "1    11.5\n",
              "2    19.5\n",
              "3    27.5\n",
              "4    35.5\n",
              "5    43.5\n",
              "6    51.5\n",
              "7    59.5\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bVaqU15bgP2a"
      },
      "source": [
        "##其他常用匯總統計值"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gx5PRqr5gPXi",
        "outputId": "0f402679-46ff-4513-a722-a176c84c255e"
      },
      "source": [
        "test.min() #最小值"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "a         0\n",
              "b         1\n",
              "c         2\n",
              "d         3\n",
              "e         4\n",
              "f         5\n",
              "g         6\n",
              "h         7\n",
              "String    e\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test.min(axis=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "frv_3Z_YLXWD",
        "outputId": "d75e87ee-715f-40f3-f8bf-ada4376180b9"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     0\n",
              "1     8\n",
              "2    16\n",
              "3    24\n",
              "4    32\n",
              "5    40\n",
              "6    48\n",
              "7    56\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NcN_Kfq8gYKi",
        "outputId": "4f075135-bcff-4289-9659-0c79f410ecc8"
      },
      "source": [
        "test.max() #最大值"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "a         56\n",
              "b         57\n",
              "c         58\n",
              "d         59\n",
              "e         60\n",
              "f         61\n",
              "g         62\n",
              "h         63\n",
              "String     y\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rFey8awlgapB",
        "outputId": "43e68bd0-0474-4c65-df9d-38c5bcfaf9ae"
      },
      "source": [
        "test.sum() #總和"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "a              224\n",
              "b              232\n",
              "c              240\n",
              "d              248\n",
              "e              256\n",
              "f              264\n",
              "g              272\n",
              "h              280\n",
              "String    qwertyui\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test.sum(axis = 1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "85T5r2_lLs1B",
        "outputId": "db753e8d-2f9e-490c-88e6-eb2b0676492a"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     28\n",
              "1     92\n",
              "2    156\n",
              "3    220\n",
              "4    284\n",
              "5    348\n",
              "6    412\n",
              "7    476\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lpgcHCo-gg2y",
        "outputId": "abe89665-fc58-4c67-ffb8-6108e4bec4c9"
      },
      "source": [
        "test.std() #標準差"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "a    19.595918\n",
              "b    19.595918\n",
              "c    19.595918\n",
              "d    19.595918\n",
              "e    19.595918\n",
              "f    19.595918\n",
              "g    19.595918\n",
              "h    19.595918\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HOpE_HULgirZ",
        "outputId": "c9b35c56-c2a5-4251-f4d9-9ca607693ca5"
      },
      "source": [
        "test.median() #中位數"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "a    28.0\n",
              "b    29.0\n",
              "c    30.0\n",
              "d    31.0\n",
              "e    32.0\n",
              "f    33.0\n",
              "g    34.0\n",
              "h    35.0\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    }
  ]
}